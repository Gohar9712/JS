// TypeScript-’´ Generics’ù ’ä÷Ä’°’Ø’ø’´’Ø ’ï÷Ä’´’∂’°’Ø’∂’•÷Ä’∏’æ üöÄ
// Generics-’∂’•÷Ä’® TypeScript-’∏÷Ç’¥ ’©’∏÷Ç’µ’¨ ’•’∂ ’ø’°’¨’´’Ω ’Ω’ø’•’≤’Æ’•’¨ ’≥’Ø’∏÷Ç’∂ (flexible) ÷á ’æ’•÷Ä÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏’≤
// (reusable) ’Ø’∏’§’ù ’°’∑’≠’°’ø’•’¨’∏’æ ’ø’°÷Ä’¢’•÷Ä ’ø’•’Ω’°’Ø’∂’•÷Ä’´ (types) ’∞’•’ø÷â ‘¥÷Ä’°’∂÷Ñ ÷Ö’£’ø’°’Ø’°÷Ä ’•’∂, ’•÷Ä’¢ ’∏÷Ç’¶’∏÷Ç’¥ ’•’∂÷Ñ ’Ω’ø’•’≤’Æ’•’¨ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂’•÷Ä, 
// ’§’°’Ω’•÷Ä ’Ø’°’¥ ’´’∂’ø’•÷Ä÷Ü’•’µ’Ω’∂’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’Ø’°÷Ä’∏’≤ ’•’∂ ’°’∑’≠’°’ø’•’¨ ’ø’°÷Ä’¢’•÷Ä ’ø’•’Ω’°’Ø’∂’•÷Ä’´ (types) ’∞’•’ø’ù ’°’º’°’∂÷Å ’∂’°’≠’°’∫’•’Ω ’Ω’°’∞’¥’°’∂’°÷É’°’Ø’•’¨’∏÷Ç ’Ø’∏’∂’Ø÷Ä’•’ø ’ø’•’Ω’°’Ø:



// ‘µ’©’• ’∏÷Ç’∂’•’∂÷Ñ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°, ’∏÷Ä’® ’®’∂’§’∏÷Ç’∂’∏÷Ç’¥ ’ß ’∏÷Ä’∏’∑’°’Ø’´ ’ø’æ’µ’°’¨ ÷á ’æ’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß ’°’µ’∂, ’°’º’°’∂÷Å ÷É’∏÷É’∏’≠’•’¨’∏÷Ç, ’°’∫’° ’°’µ’∂ ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’£÷Ä’•’¨ ’∞’•’ø÷á’µ’°’¨ ’Ø’•÷Ä’∫.



function foo<T>(arg: T): T {
    return arg;
}
  
console.log(foo<number>(5));       // 5
console.log(foo<string>("Hello")); // "Hello"
console.log(foo<boolean>(true));   // true

// T-’∂ ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’∏÷Ç’¥ ’ß ’ø’•’Ω’°’Ø’´ ’ø’•’≤’°’∫’°’∞ (type placeholder)÷â


// 3. Generics ’¢’°’¶’¥’°’Ø’´ ’ø’•’Ω’°’Ø’∂’•÷Ä’´ ’∞’•’ø
// ’Ñ’•’Ø’´÷Å ’°’æ’•’¨’´ Generics-’∂’•÷Ä ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨, ’•’©’• ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂ ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß ’ø’°÷Ä’¢’•÷Ä ’ø’•’Ω’°’Ø’∂’•÷Ä’´ ’∞’•’ø.


function pair<T, U>(first: T, second: U): [T, U] {
    return [first, second];
}
  
console.log(pair<string, number>("Age", 30)); // ["Age", 30]
console.log(pair<boolean, string>(true, "Success")); // [true, "Success"]


// 4. Generics ’´’∂’ø’•÷Ä÷Ü’•’µ’Ω’∂’•÷Ä’∏÷Ç’¥
// ’ï÷Ä’´’∂’°’Ø, ’•’©’• ’∏÷Ç’∂’•’∂÷Ñ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’ø’æ’µ’°’¨’∂’•÷Ä’®, ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’Ω’ø’•’≤’Æ’•’¨ ’´’∂’ø’•÷Ä÷Ü’•’µ’Ω, ’∏÷Ä’® ’Ø’°’∑’≠’°’ø’´ ’ø’°÷Ä’¢’•÷Ä ’ø’•’Ω’°’Ø’∂’•÷Ä’´ ’∞’•’ø.

interface ApiResponse<T> {
  status: number;
  data: T;
}

const userResponse: ApiResponse<{ name: string; age: number }> = {
  status: 200,
  data: { name: "Alice", age: 25 },
};

console.log(userResponse.data.age);




// 5. Generics ’§’°’Ω’•÷Ä’´ (Classes) ’∞’•’ø
// ’ï÷Ä’´’∂’°’Ø, ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’Ω’ø’•’≤’Æ’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∏÷Å (data storage) class, ’∏÷Ä’® ’Ø’°÷Ä’∏’≤ ’ß ’°’∑’≠’°’ø’•’¨ ’ø’°÷Ä’¢’•÷Ä ’ø’•’Ω’°’Ø’∂’•÷Ä’´ ’∞’•’ø.

class DataStorage<T> {
  private storage: T[] = [];

  addItem(item: T): void {
    this.storage.push(item);
  }

  removeItem(item: T): void {
    this.storage = this.storage.filter(i => i !== item);
  }

  getItems(): T[] {
    return [...this.storage];
  }
}

const textStorage = new DataStorage<string>();
textStorage.addItem("Hello");
textStorage.addItem("World");
console.log(textStorage.getItems()); // ["Hello", "World"]

textStorage.removeItem("Hello");
console.log(textStorage.getItems()); // ["World"]

const numberStorage = new DataStorage<number>();
numberStorage.addItem(10);
numberStorage.addItem(20);
console.log(numberStorage.getItems()); // [10, 20]